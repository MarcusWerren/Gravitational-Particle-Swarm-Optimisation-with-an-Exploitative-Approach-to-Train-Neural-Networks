##########################################################################################################
# Title: Load Data script
# Author: Marcus Werren
# Email: u17258627@tuks.co.za
# Script and data info: This script extracts the data from the relevant files and puts the data into a format suitable for PyTorch.  
# Note: These classes do not perform data normalisation and preparation.
##########################################################################################################

# PyTorch imports
import torch
from torch.utils.data import Dataset, DataLoader
import torchvision
import torchvision.transforms as transforms

# Misc imports
import numpy as np
import csv

# Class to load the Iris Data set
class IrisDataset(Dataset):

	def __init__(self, path):
		with open(path) as csvFile:
			csvReader =  csv.reader(csvFile, delimiter=",")
			labels = []
			data = np.array([])
			rowLen = -1

			next(csvReader)
			for row in csvReader:
				if row:
					label = (row[len(row)-1:])[0]
					if rowLen == -1:
						rowLen = len(row)

					if (label in labels) == False:
						labels.append(label)

					row[len(row)-1] = f'{labels.index(label)}'

					data = np.append(data, np.loadtxt(row, dtype=np.float32))

		data = data.reshape(int(len(data)/rowLen), rowLen)

	
		self.x = torch.from_numpy(data[:, :-1])
		self.x =  self.x.type(torch.float32)

		self.y = torch.from_numpy(data[:, -1])
		self.y =  self.y.type(torch.int64)

		self.num_samples = data.shape[0]

	def __getitem__(self, index):
		return self.x[index], self.y[index]

	def __len__(self):
		return self.num_samples

# Class to load the Balance Scale data set
class BalanceScaleDataset(Dataset):

	def __init__(self, path):
		with open(path) as csvFile:
			csvReader = csv.reader(csvFile, delimiter=",")
			labels = []
			data = np.array([])
			rowLen = -1

			for row in csvReader:
				if row:
					label = (row[0:])[0]
					if rowLen == -1:
						rowLen = len(row)

					if (label in labels) == False:
						labels.append(label)

					row[0] = f'{labels.index(label)}'

					data = np.append(data, np.loadtxt(row, dtype=np.float32))

		data = data.reshape(int(len(data)/rowLen), rowLen)

		self.x = torch.from_numpy(data[:, 1:])
		self.x =  self.x.type(torch.float32)

		self.y = torch.from_numpy(data[:, 0])
		self.y =  self.y.type(torch.int64)

		self.num_samples = data.shape[0]

	def __getitem__(self, index):
		return self.x[index], self.y[index]

	def __len__(self):
		return self.num_samples

# Class to load the Bank Note Authentication data set 
class BankNoteDataset(Dataset):

	def __init__(self, path):
		with open(path) as csvFile:
			csvReader = csv.reader(csvFile, delimiter=",")
			data = np.array([])
			rowLen = -1

			for row in csvReader:
				if row:
					if rowLen == -1:
						rowLen = len(row)
					
					data = np.append(data, np.loadtxt(row, dtype=np.float32))

		data = data.reshape(int(len(data)/rowLen), rowLen)

		self.x = torch.from_numpy(data[:, :-1])
		self.x =  self.x.type(torch.float32)

		self.y = torch.from_numpy(data[:, -1])
		self.y =  self.y.type(torch.int64)

		self.num_samples = data.shape[0]

	def __getitem__(self, index):
		return self.x[index], self.y[index]

	def __len__(self):
		return self.num_samples

# Class to load the Breast Cancer Data set 
class BreastCancerDataset(Dataset):
	
	def __init__(self, path):
		with open(path) as csvFile:
			csvReader =  csv.reader(csvFile, delimiter=",")
			labels = []
			data = np.array([])
			rowLen = -1

			for row in csvReader:
				if row:
					label = (row[len(row)-1:])[0]
					if rowLen == -1:
						rowLen = len(row)

					if (label in labels) == False:
						labels.append(label)

					row[len(row)-1] = f'{labels.index(label)}'

					try:
						data = np.append(data, np.loadtxt(row, dtype=np.float32))
					except:
						...


		data = data.reshape(int(len(data)/rowLen), rowLen)
	
		self.x = torch.from_numpy(data[:, 1:-1])
		self.x =  self.x.type(torch.float32)

		self.y = torch.from_numpy(data[:, -1])
		self.y =  self.y.type(torch.int64)

		self.num_samples = data.shape[0]

	def __getitem__(self, index):
		return self.x[index], self.y[index]

	def __len__(self):
		return self.num_samples

# Class to load the Seeds data set 
class SeedsDataset(Dataset):

	def __init__(self, path):
		with open(path) as csvFile:
			csvReader =  csv.reader(csvFile, delimiter="\t")
			labels = []
			data = np.array([])
			rowLen = -1

			for row in csvReader:
				if row:
					label = (row[len(row)-1:])[0]
					if rowLen == -1:
						rowLen = len(row)

					if (label in labels) == False:
						labels.append(label)

					row[len(row)-1] = f'{labels.index(label)}'

					data = np.append(data, np.loadtxt(row, dtype=np.float32))

		data = data.reshape(int(len(data)/rowLen), rowLen)

		self.x = torch.from_numpy(data[:, :-1])
		self.x =  self.x.type(torch.float32)

		self.y = torch.from_numpy(data[:, -1])
		self.y =  self.y.type(torch.int64)

		self.num_samples = data.shape[0]

	def __getitem__(self, index):
		return self.x[index], self.y[index]

	def __len__(self):
		return self.num_samples


class MNISTDataset(Dataset):

	def __init__(self, path):
		# train_dataset  = torchvision.datasets.MNIST(root='./data', train=True, transform=transforms.ToTensor(), download=True)
		# test_dataset = torchvision.datasets.MNIST(root='./data', train=False, transform=transforms.ToTensor(), download=True)

		self.dataset = torchvision.datasets.MNIST(root='./data', transform=transforms.ToTensor(), download=True)

		# print(train_dataset[0][1], " ", dataset[0][1])
		# print(train_dataset[1][1], " ", dataset[1][1])
		# print(train_dataset[2][1], " ", dataset[2][1])
		# print(train_dataset[3][1], " ", dataset[3][1])
		# print(train_dataset[4][1], " ", dataset[4][1])
		# print(train_dataset[5][1], " ", dataset[5][1])
		# print(train_dataset[6][1], " ", dataset[6][1])

		# print(self.dataset[0].shape[0])


	def __getitem__(self, index):
		return self.dataset[index][0], self.dataset[index][1]

	def __len__(self):
		return len(self.dataset)