##########################################################################################################
# Title: Neural Network Script
# Author: Marcus Werren
# Email: u17258627@tuks.co.za
# Script and data info: This Script creates neural network models and provides custom functions for NN model manipulation. 
# Note:
##########################################################################################################

# PyTorch imports
import torch
import torch.nn as nn
import torch.nn.functional as F

# Misc imports
import copy
import math 

# Class to create a NN
class NeuralNet(nn.Module):	
	# Initialise the NN model
	def __init__(self, input_size, hidden_size, num_classes):
		super(NeuralNet, self).__init__()
		# Create each layer
		self.l1 = nn.Linear(input_size, hidden_size)
		self.l2 = nn.Linear(hidden_size, num_classes)

		# Create a uniform distribution for inital weights 
		nn.init.uniform_(self.l1.weight, -1/math.sqrt(input_size), 1/math.sqrt(input_size))
		nn.init.uniform_(self.l2.weight, -1/math.sqrt(hidden_size), 1/math.sqrt(hidden_size))

	def forward(self, x):
		# out = F.relu(self.l1(x))
		out = F.leaky_relu(self.l1(x), negative_slope=0.05)
		out = F.softmax(self.l2(out), dim=1) # Softmax activation function for the last layer
		# out = torch.sigmoid(self.l2(out)) # Sigmoid activation function for the last layer 

		return out

	# Return the layer
	def layer(self, index):
		if index == 0:
			return self.l1

		elif index == 1:
			return self.l2

	# Create a deep copy of the model
	def copyModel(self):
		return copy.deepcopy(self)

	# Randomize all the weights of the current model
	def createRandomModel(self):

		for name, param in self.named_parameters():
			values = torch.rand(param.shape)
			param.data = values

		return self

	# Set all weight to zero for the curret model
	def zeros(self):
		
		for name, param in self.named_parameters():
			values = torch.zeros(param.shape)
			param.data = values

		return self